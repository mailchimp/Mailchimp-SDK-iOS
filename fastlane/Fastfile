# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

fastlane_require 'fileutils'

default_platform(:ios)

project_name = "MailchimpSDK"
workspace_name = "#{project_name}.xcworkspace"
sdk_scheme_name = project_name
project_file_path = "Sources/#{project_name}/#{project_name}.xcodeproj/"
podspec_path = "#{project_name}.podspec"
build_path = "../build"
deploy_path = "../deploy"
device_archive_path = "#{build_path}/MailchimpDeviceSDK.xcarchive"
simulator_archive_path = "#{build_path}/MailchimpSimulatorSDK.xcarchive"
framework_name = project_name
xcframework_file_name = "#{project_name}.xcframework"
xcframework_output_path = "#{build_path}/#{xcframework_file_name}"
deploy_zip = "Mailchimp-SDK-iOS.zip"
changelog_path = "../Changelog.md"
readme_path = "../README.md"
license_path = "../LICENSE"
change_types = %w(Added Changed Deprecated Removed Fixed Security)
changelog_insertion_line = 6

platform :ios do
  desc "Builds the SDK framework"
  lane :build_framework do
    xcodebuild(scheme: sdk_scheme_name,
               workspace: workspace_name)
  end

  desc "Archives the SDK framework"
  lane :archive_framework do
    # Defining 2 destinations in a single call did not work in practice. This will build the 2 archives separately.
    sh("xcodebuild archive -workspace '../#{workspace_name}' -archivePath '#{device_archive_path}' -scheme #{sdk_scheme_name} -destination 'generic/platform=iOS' SKIP_INSTALL=NO BUILD_LIBRARY_FOR_DISTRIBUTION=YES")
    sh("xcodebuild archive -workspace '../#{workspace_name}' -archivePath '#{simulator_archive_path}' -scheme #{sdk_scheme_name} -destination 'generic/platform=iOS Simulator' SKIP_INSTALL=NO BUILD_LIBRARY_FOR_DISTRIBUTION=YES")
  end

  desc "Create Swift Binary Framework"
  lane :create_binary_framework do
    archive_framework

    # Remove any existing xcframeworks on local machine
    sh("rm -rf #{xcframework_output_path}")

    # When fastlane supports -create-xcframework in the xcodebuild() command, we could replace this (https://github.com/fastlane/fastlane/issues/15055)
    sh("xcodebuild -create-xcframework -framework '#{device_archive_path}/Products/Library/Frameworks/#{framework_name}.framework' -framework '#{simulator_archive_path}/Products/Library/Frameworks/#{framework_name}.framework' -output '#{output_path}/#{xcframework_file_name}'")
  end

  desc "Create a release candidate"
  lane :release do
    # Always use MARKETING_VERSION for a Release Candidate. Use `set_version` to update MARKETING_VERSION
    version = marketing_version

    # Clean up previous runs
    clean

    # Create the binary framework
    create_binary_framework

    # Move the files into a temporary deploy directory
    FileUtils.mkdir(deploy_path)
    FileUtils.cp_r("#{output_path}/#{xcframework_file_name}", "#{deploy_path}/#{xcframework_file_name}")
    FileUtils.copy(readme_path, deploy_path)
    FileUtils.copy(changelog_path, deploy_path)
    FileUtils.copy(license_path, deploy_path)

    # Zip the framework, README, and Changelog
    zip(path: "deploy", output_path: deploy_zip)

    # Remove temporary deploy directory
    FileUtils.remove_dir(deploy_path, force = true)

    set_github_release(
      repository_name: "mailchimp/Mailchimp-SDK-iOS",
      api_token: ENV["GITHUB_TOKEN"],
      name: "v#{version}",
      tag_name: "v#{version}",
      description: (File.read(changelog_path) rescue "No Changelog provided"),
      commitish: "master",
      upload_assets: deploy_zip
    )
  end

  desc "Clean deploy artifacts"
  lane :clean do
    # Remove any previous deploy directory
    FileUtils.remove_dir(deploy_path, force = true)

    # Remove any previous zipped SDK products
    FileUtils.remove_file("../#{deploy_zip}", force = true)
  end

  desc "Sets the SDK version in all files"
  lane :set_version do
    version = prompt(text: "Enter version number:").gsub(/^v/, '')

    # Set MARKETING_VERSION using `versioning` plugin
    increment_version_number_in_xcodeproj(
      version_number: version,
      xcodeproj: project_file_path
    )
    UI.message "MARKETING_VERSION updated to #{version}"

    version_bump_podspec(path: podspec_path, version_number: version)
    UI.message "Podspec version updated to #{version}"

    UI.important "You will now update the Changelog. You will be prompted to add entries for any of the available change types. See https://keepachangelog.com/en/1.0.0/ for format."

    today = DateTime.now.strftime("%Y-%m-%d")
    changelog_changes = ["## [#{version}] - #{today}"]
    included_change_type_index = 0 # For keeping track of which change types we include to format empty lines correctly

    change_types.each { |type|
      input = prompt(text: "Include entry for `#{type}`?", boolean: true)
      if (input)
        if (included_change_type_index > 0)
          changelog_changes << "" # Add an extra line between change type sections
        end

        included_change_type_index += 1
        changelog_changes << "### #{type}" # Add change type title

        finished = false
        while(!finished)
          entry = prompt(text: "Type your entry for `#{type}`: ")
          entry = '- ' + entry unless entry.start_with?('-') # Attach the - prefix if needed
          changelog_changes << entry # Add line to total changes

          additional_input = prompt(text: "Any additional entries for `#{type}`?", boolean: true)
          finished = !additional_input # If additional entries is true, we are NOT finished
        end
      end
    }
    changelog_changes << "" # Add a trailing new line to separate from previous sections

    changelog_lines = File.open(changelog_path).readlines
    changelog_lines.insert(changelog_insertion_line, changelog_changes) # Insert the changes

    # Write out the Changelog including the additions, line by line
    File.open(changelog_path, "w+") do |f|
      changelog_lines.each { |element| f.puts(element) }
    end

    UI.message "#{changelog_path} has been updated."
  end

  desc "Pushes our Podspec up to Cocoapods"
  lane :push_podspec do
    pod_push(path: "MailchimpSDK.podspec")
  end

end

def output_path
  # Use Bitrise Deploy Directory as output path if available
  return ENV.fetch('BITRISE_DEPLOY_DIR', "../build")
end

def marketing_version
  get_version_number(xcodeproj: "MailchimpSDK/MailchimpSDK.xcodeproj")
end
